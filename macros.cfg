[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed, extruder, and chamber temps and size of your printer.
  {% set BED_TEMP=params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP=params.EXTRUDER_TEMP|default(245)|float %}
  {% set BEACON_TEMP=params.BED_TEMP|int * 0.65|float %}
  
  BED_MESH_CLEAR                                         # Clear old saved bed mesh (if any)
  SET_GCODE_OFFSET Z=0                                   # Set offset to 0
  LIGHTS_ON                                              # turn on the lights
  G90
  M83
  M140 S{BED_TEMP}                                       # Start bed heater
  _CG28                                                  # Home (XYZ)
  G1 X117.5 Y117.5 Z1 F12000                             # Go to center of the bed
  #PARKCENTER
  M190 S{BED_TEMP}                                       # Set the target temp for the bed
  #G4 P200000                                             # Let temps settle for 5 min
  PARKBUCKET                                             # Park in the bucket
  M109 S160                                              # Heat hotend to 150c
  WIPE_NOZZLE                                            # Clean nozzle
  G28 Z METHOD=CONTACT CALIBRATE=1                       # Calibrate z offset and beacon model
  Z_TILT_ADJUST                                          # Level the printer via Z_TILT_ADJUST
  BED_MESH_CALIBRATE ADAPTIVE=1 RUNS=2                   # Start the bed mesh (add ADAPTIVE=1) for adaptive bed mesh
  #WIPE_NOZZLE
  #G28 Z METHOD=CONTACT CALIBRATE=0                       # Calibrate z offset only after tilt/mesh
  G1 X3 Y3 F3000
  M104 S{EXTRUDER_TEMP}                                  # Set extruder to print temp
  M109 S{EXTRUDER_TEMP}                                  # Wait for extruder temp
  G1 X0.1 Y40 F5000.0
  G1 Z0.3 F2000.0 # Move Z down to begin prime line
  M83 
  G92 E0 # Reset Extruder
  G1 X3 Y100.0 Z0.3 F1500.0 E15 # Draw prime lines
  G1 X3.4 Y100.0 Z0.3 F5000.0 # Draw prime lines
  G1 X3.4 Y10 Z0.3 F1500.0 E30 # Draw prime lines
  G92 E0 # Reset Extruder
  
[gcode_macro PRINT_END]
gcode:
#   Get boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #   Set end move values
    {% set move_x = 20.0 %}
    {% set move_y = 20.0 %}
    {% set move_z = 2.0 %}

    #   Check end position to determine safe directions to move
    {% if printer.toolhead.position.x < (max_x - move_x) %}
        {% set x_safe = move_x %}
    {% else %}
        {% set x_safe = -move_x %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - move_y) %}
        {% set y_safe = move_y %}
    {% else %}
        {% set y_safe = -move_y %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - move_z) %}
        {% set z_safe = move_z %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    #	Commence Print End
    M400                                       # Wait for buffer to clear
    G92 E0                                     # Zero the extruder
    G1 E-10.0 F3600                            # Retract filament
    G91                                        # Relative positioning
    G0 Z{z_safe} X{x_safe} Y{y_safe} F20000    # Move nozzle to remove stringing
    BED_MESH_CLEAR                             # Clear old saved bed mesh (if any)
    SET_GCODE_OFFSET Z=0                       # Set offset to 0
    WIPE_NOZZLE
    OFF

[gcode_macro _CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

[gcode_macro M109] # Wait Hotend Temp
rename_existing: M109.1
gcode:
    #Parameters
    {% set s = params.S|float %}

    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  # Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s-2} MAXIMUM={s+5}   # Wait for hotend temp (within n degrees)
    {% endif %}

[gcode_macro M190] # Wait Bed Temp
rename_existing: M190.1
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   # Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s-2} MAXIMUM={s+5}  # Wait for bed temp (within n degrees)
    {% endif %}

[gcode_macro WIPE_NOZZLE]
variable_start_x: -10
variable_start_y: 235
variable_start_z: 0.1
variable_wipe_dist: 50
variable_wipe_qty: 2
variable_wipe_spd: 200
variable_raise_distance: 5

gcode:
  _CG28
  G90                                     ; absolute positioning
  ## Move nozzle to start position
  G1 Y{start_y} F12000
  G1 X{start_x} F12000
  G1 Z{start_z} F1500
  
## Wipe nozzle
  {% for wipes in range(1, (wipe_qty + 1)) %}
    G1 Y{start_y - wipe_dist} F{wipe_spd * 60}
    G1 Y{start_y} F{wipe_spd * 60}
  {% endfor %}
  {% for wipes in range(1, (wipe_qty + 1)) %}
    G1 X{start_x + 2} F{wipe_spd * 60}
    G1 Y{start_y - wipe_dist} F{wipe_spd * 60}
    G1 Y{start_y} F{wipe_spd * 60}
  {% endfor %}
    {% for wipes in range(1, (wipe_qty + 1)) %}
    G1 Y{start_y - wipe_dist} F{wipe_spd * 60}
    G1 Y{start_y} F{wipe_spd * 60}
  {% endfor %}
  {% for wipes in range(1, (wipe_qty + 1)) %}
    G1 X{start_x + 2} F{wipe_spd * 60}
    G1 Y{start_y - wipe_dist} F{wipe_spd * 60}
    G1 Y{start_y} F{wipe_spd * 60}
  {% endfor %}
    G1 Z{raise_distance} F1500

[gcode_macro FAST_Z_TILT]
gcode:
    M117 Z_TILT
    {% if printer.configfile.settings.z_tilt %}
        {% if printer.z_tilt.applied == False %}
            Z_TILT_ADJUST RETRY_TOLERANCE=1
        {% endif %}
        Z_TILT_ADJUST horizontal_move_z=2
    {% endif %} 

[gcode_macro PARKCENTER]
gcode:
  _CG28                                 ; home if not already homed
  G90                                   ; absolute positioning
  G0 X117.5 Y117.5 F12000               ; park in the center

[gcode_macro PARKBUCKET]
gcode:
  _CG28                                 ; home if not already homed
  G90                                   ; absolute positioning
  G0 X-10 Y235 F12000                   ; park in the bucket

[gcode_macro OFF]
gcode:
  TURN_OFF_HEATERS
  M107                               ; turn off fan
  PARKBUCKET                         # Park in the bucket
  M84                                ; disable motors
  LIGHTS_OFF
    
# Replacement-Macro to control the Fan with M106 P2 and M107 for BambuStudio
# Macro inspired by klipper-github issue https://github.com/Klipper3d/klipper/issues/2174
[gcode_macro M106]
rename_existing: G106
gcode:
    {% if params.P is defined %}
        {% if params.P|int == 2 %}
            {% if params.S is defined %}
                {% if params.S|int == 255 %}
                    {% set realspeed = 1 %}
                {% else %}
                    {% if params.S|int == 0 %}
                        {% set realspeed = 0 %}
                    {% else %}
                        {% set realspeed = params.S|float/255 %}
                    {% endif %}
                {% endif %}
            {% else %}
                {% set realspeed = 1 %}
            {% endif %}

            SET_PIN PIN=RSCS VALUE={realspeed}
        {% endif %}
    {% else %}
        {% if params.S is defined %}
          G106 S{params.S}
        {% else %}
          G106 S255
        {% endif %}
    {% endif %}

[gcode_macro M107]
rename_existing: G107
gcode:
    {% if params.P is defined %}
      {% if params.P|int == 2 %}
        SET_PIN PIN=RSCS VALUE=0
      {% endif %}      
    {% else %}
      SET_PIN PIN=RSCS VALUE=0  
      G107
    {% endif %}

[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}

[gcode_macro M600]
gcode:
    {% set X = params.X|default(-25)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro UNLOAD_FILAMENT]
gcode:
  SAVE_GCODE_STATE NAME=unload_state
  G92 E0.0
  G91
  G1 E-45 F1000
  G90
  G92 E0.0
  M400
  RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro LOAD_FILAMENT]
gcode:
  SAVE_GCODE_STATE NAME=load_state
  M104 S250                               # Set extruder to print temp
  _CG28
  G1 Z200 F12000
  M104 S250
  M109 S250                               # Wait for extruder temp
  G92 E0.0
  G91
  G1 E200 F500
  G1 E-10 F500
  G90
  G92 E0.0
  TURN_OFF_HEATERS
  M400
  G1 Z5 F12000
  RESTORE_GCODE_STATE NAME=load_state

[gcode_macro SHAPE_TIP]
description: Perform tip-shaping, retraction, and cooling moves
gcode:
    SAVE_GCODE_STATE NAME=Shape_Tip_state
    Save_Pressure_Advance
    M83 # extruder relative mode
    
    # gcode generated by SuperSlicer, with XY moves removed
    ;--------------------
    ; CP TOOLCHANGE START
    ; toolchange #1
    ; material : PLA -> PLA
    ;--------------------
    M220 S100
    ; CP TOOLCHANGE UNLOAD
    ;WIDTH:0.65
    # G1  X66.273 Y170.819  
    SET_PRESSURE_ADVANCE ADVANCE=0
    G1 E0.1634 F2112
    G1 E-15 F6000
    G1 E-24.5 F5400
    G1 E-10 F2700
    G1 E-5.5 F1620
    G1 E40 F1270
    G1 E-40 F1361
    M73 P2 R57
    G1 E40 F1451
    G1 E-40 F1542
    G1 E40 F1633
    G1 E-40 F1723
    G1 E40 F1814
    G1 E-40 F1905
    G4 S0
    ; custom gcode: end_filament_gcode
    ; Filament-specific end gcode 
    ;END gcode for filament
    ; custom gcode end: end_filament_gcode
    Restore_Pressure_Advance
    RESTORE_GCODE_STATE NAME=Shape_Tip_state

[gcode_macro PID_EXTRUDER]
description: PID Tune for the Extruder
gcode:
  {% set TARGET_TEMP = params.TARGET_TEMP|default(260)|float %}
  PID_CALIBRATE HEATER=extruder TARGET={TARGET_TEMP}
  TURN_OFF_HEATERS
  SAVE_CONFIG

[gcode_macro PID_BED]
description: PID Tune for the Bed
gcode:
  {% set TARGET_TEMP = params.TARGET_TEMP|default(110)|float %}
  PID_CALIBRATE HEATER=heater_bed TARGET={TARGET_TEMP}
  TURN_OFF_HEATERS
  SAVE_CONFIG

[gcode_macro LIGHTS_OFF]
gcode:
    SET_LED LED=lights RED=0 GREEN=0 BLUE=0 WHITE=0

[gcode_macro LIGHTS_ON]
gcode:
    SET_LED LED=lights RED=1 GREEN=1 BLUE=1 WHITE=1

[gcode_macro LIGHTS_TOGGLE]
gcode:
    {% if printer["neopixel lights"].color_data[1][2] > 0 %}
    LIGHTS_OFF
    {% else %}
    LIGHTS_ON
    {% endif %}